1. GIT
    - Xem lịch sử commit
        - git log (nhấn q để thoát)
    - Thay đổi commit message
        - git commit --amend => mở chế độ editor của vim để sửa nội dung commit mới nhất
            . Gõ i -> vào chế độ insert
            . Gõ esc để thoát insert
            . Gõ ":wq" -> write and quit
        - git commit --amend -m "message" => sửa nội dung của commit mới nhất với nội dung là "message"
    - Đưa từ vùng staging về working directory
        - git restore --staged <file> => restore 1 file
        - git restore --staged . => restore toàn bộ file

    - Đưa từ vùng repository về working directory (uncommit)
        - git reset HEAD~1 (undo 1 commit)
    - Branching model
        - git branch <ten_branch> => tạo branch mới có tên <ten_branch>
        - git checkout <ten_branch> => checkout qua branch có tên <ten_branch>
        - git checkout -b <ten_branch> => tạo branch mới và checkout qua branch có tên <ten_branch>
        *** Tips: Luôn tạo branch mới trước khi thực hiện một lệnh copy từ internet
        - git checkout <revision> => Để trở về revision/commit hash (hay hiểu đơn giản là đi về thời điểm quá khứ xem lúc ấy code của mình có gì)
            - git checkout 070745d6c000d2a90740dcf97ee5db3f9418cc1f

    - .gitignore file
        - Dùng để bỏ qua các file không cần git theo dõi. (viết tên file, tên folder trong file .gitignore)
        - Ignore file
            - <file_name>
        - Ignore folder
            - <folder-name>/

2. Javascript
    a. Conventions:
        - snake_case: chưa dùng
        - kebab-case: tên file
        - camelCase: tên biến
        - PascalCase: tên class
    b. Formatted console.log, console.log with "and"
        - console.log(‘Toi la Nga’);
        - console.log("Toi la Phong");
        - console.log(`${variable_name}`)
        - let name = "Nga";
        - console.log(`Toi la ${name}`);
        - console.log("Toi ten la" + name + "")
    c. Object:
        - Khai báo: 
            let/const <ten_object> = {
                <thuoc_tinh>: <gia_tri>,
                ...
            }
        - Trong đó:
            - <thuoc_tinh>: giống quy tắc đặt tên biến
            - <gia tri>: có kiểu giống biến, hoặc là 1 object khác.
        - Ví dụ:
            - Khai báo:
                let user = {"name": "Alex", "age": 10,
                    "email": "alex@gmail.com"}
                
                const product = {
                    "name": "Laptop",
                    "price": 500,
                    "isWindow": true,
                    "manufacturer": {
                        "name": "Acer",
                        "year": 2024
                    }
                }
            - Sử dụng:
                console.log("name = " + user.name);
                console.log("manufacturer name = " + product.manufacturer.name);
                console.log("price = ", product["price"]);
            - Gán lại:
                user.age = 28
                product[“manufacturer”][“year”] = 2025
            - Thêm thuộc tính:
                - Để thêm thuộc tính mới vào object, chúng ta chỉ cần dùng dấu . hoặc ngoặc vuông [] để định nghĩa thuộc tính mới
                - Ví dụ:
                    let bike = {
                        make: 'Yamaha',
                        model: 'YZF-R3'
                    };

                    bike.color = “Blue”;
                    bike[“price new”] = 100;

                    console.log(bike); => Kết quả: {make: 'Yamaha', model: 'YZF-R3', color: 'Blue', ‘price new’ : 100}
            - Xóa thuộc tính:
                - Để xóa thuộc tính của object, chúng ta dùng hàm delete:
                - Ví dụ:
                    let employee = {
                        name: 'Le Van C',
                        age: 30,
                        department: 'HR'
                    };

                    delete employee.age;
                    console.log(employee); => Kết quả: {name: 'Le Van C', department: 'HR'}
    d. Logical operator
        - && : cả 2 vế của mệnh đề đều đúng
        - || : một trong 2 vế đúng
        - ! : đảo ngược lại giá trị của mệnh đề
    e. Array
        - Tạo mảng
            - Khai báo
            - Sử dụng
        - Truy xuất mảng
            - Độ dài mảng: length
            - Lấy phần tử theo index: [0], [1], [2]
        - Thêm phần tử vào mảng, ta dùng hàm push
            - Ví dụ:
                const arr = [1,2];
                arr.push(3);
                console.log(arr); => Kết quả in ra: [1, 2, 3]
    f. Function
        - Function = hàm, là đoạn code được đặt tên và có thể tái sử dụng, thực hiện 1 nhiệm vụ hoặc 1 tính toán cụ thể.
        - Khai báo
            function <nameFunction>() {
                // code
            }
        - Parameter
        - Return value
