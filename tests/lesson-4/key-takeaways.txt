1. Javascript
    a. Ph·∫°m vi c·ªßa bi·∫øn, var v√† let
        - Ph·∫°m vi c·ªßa bi·∫øn
            - var: global
            - let: local
            - Scope: {}
        - Hoisting: l√† c∆° ch·∫ø m·∫∑c ƒë·ªãnh c·ªßa JavaScript ƒë·ªÉ di chuy·ªÉn t·∫•t c·∫£ c√°c bi·∫øn v√† h√†m khi khai b√°o l√™n ƒë·∫ßu scope tr∆∞·ªõc khi ch√∫ng ƒë∆∞·ª£c th·ª±c thi.
            - var: Bi·∫øn ƒë∆∞·ª£c hoisted l√™n ƒë·∫ßu ph·∫°m vi, cho ph√©p b·∫°n s·ª≠ d·ª•ng bi·∫øn tr∆∞·ªõc khi khai b√°o. Tuy nhi√™n, gi√° tr·ªã c·ªßa bi·∫øn s·∫Ω l√† undefined 
                    cho ƒë·∫øn khi n√≥ ƒë∆∞·ª£c kh·ªüi t·∫°o. ƒêi·ªÅu n√†y c√≥ th·ªÉ d·∫´n ƒë·∫øn c√°c l·ªói kh√≥ ph√°t hi·ªán n·∫øu b·∫°n kh√¥ng c·∫©n th·∫≠n.
                - Vd:
                    console.log(a); // => undefined
                    var a = 5;
            - let v√† const: Bi·∫øn c≈©ng ƒë∆∞·ª£c hoisted, nh∆∞ng n·∫±m trong Temporal Dead Zone cho ƒë·∫øn khi khai b√°o. ƒêi·ªÅu n√†y c√≥ nghƒ©a l√† b·∫°n kh√¥ng th·ªÉ 
                    truy c·∫≠p bi·∫øn tr∆∞·ªõc khi khai b√°o, gi√∫p tr√°nh ƒë∆∞·ª£c c√°c l·ªói li√™n quan ƒë·∫øn vi·ªác s·ª≠ d·ª•ng bi·∫øn ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. 
                    let v√† const cung c·∫•p m·ªôt c∆° ch·∫ø ki·ªÉm so√°t t·ªët h∆°n v√† gi·∫£m thi·ªÉu l·ªói so v·ªõi var.
                - Vd:
                    console.log(b); // => cannot access 'a' before initialization
                    let b = 5;
    b. ƒêi·ªÅu ki·ªán n√¢ng cao: if...else, if...else if, switch...case default
        - if...else
            if (condition) {
                // code run if condition = true
            } else {
                // code run if condition = false
            }
        - if...else if
            if (condition 1) {
                // code run if condition 1 = true
            } else  if (condition 2) {
                // code run if condition 2 = true
            } else  if (condition 3) {
                // code run if condition 3 = true
            } else {
                // all condition = false
            }
        - switch...case default
            switch (expression) {
                case value_1:
                    // run code
                    break;
                case value_2:
                    // run code
                    break;
                case value_3:
                    // run code
                    break;
                default:
                    // run code
            }
    c. == v√† !=
        . == v√† !=
            . So s√°nh value
            . So s√°nh ki·ªÉu ‚Äúl·ªèng l·∫ªo‚Äù
            . Convert gi√° tr·ªã v·ªÅ ki·ªÉu ‚Äúl·ªõn h∆°n‚Äù
        . ===, !==: so s√°nh tuy·ªát ƒë·ªëi
            . So s√°nh value + data type
    d. V√≤ng g·∫∑p n√¢ng cao:
        - for ... in, forEach, for ... of
            -----------------------------------------------------------------------------------------------------------------------
            |   Loop Type   |   D√πng cho	                    |   D√πng khi n√†o
            =======================================================================================================================
            |   for...in	|   Object, Array (tr√°nh d√πng)	    |   Khi c·∫ßn duy·ªát key c·ªßa object ho·∫∑c ch·ªâ m·ª•c (index) c·ªßa m·ªôt m·∫£ng
            -----------------------------------------------------------------------------------------------------------------------
            |   for...of	|   Array, String, Map, Set	        |   Khi c·∫ßn duy·ªát gi√° tr·ªã c·ªßa iterable
            -----------------------------------------------------------------------------------------------------------------------
            |   .forEach()	|   Array	                        |   Khi c·∫ßn duy·ªát t·∫•t c·∫£ ph·∫ßn t·ª≠ c·ªßa m·∫£ng (kh√¥ng c·∫ßn break)
            |               |                                   |   Kh√¥ng th·ªÉ d√πng break ho·∫∑c return ƒë·ªÉ d·ª´ng v√≤ng l·∫∑p.
            -----------------------------------------------------------------------------------------------------------------------
            - K·∫øt lu·∫≠n:
                - N·∫øu duy·ªát object üëâ for...in.
                - N·∫øu duy·ªát m·∫£ng üëâ for...of ho·∫∑c .forEach().
                - N·∫øu c·∫ßn break/continue üëâ d√πng for...of.
            - C√∫ ph√°p:
                for (let i in object) {
                    // code
                }

                for (let i of array) {
                    // code
                }

                array.forEach((value, index) => {
                    // code
                });
        - break and continue
            -------------------------------------------------------------------------------------------------------------------------
            |   T√≠nh nƒÉng   |       break üõë	                        |       continue ‚è≠Ô∏è
            =========================================================================================================================
            | ·∫¢nh h∆∞·ªüng     | D·ª´ng to√†n b·ªô v√≤ng l·∫∑p                     | B·ªè qua v√≤ng l·∫∑p hi·ªán t·∫°i, ti·∫øp t·ª•c v√≤ng l·∫∑p ti·∫øp theo
            -------------------------------------------------------------------------------------------------------------------------
            | D√πng khi n√†o? | Khi c·∫ßn tho√°t kh·ªèi v√≤ng l·∫∑p ngay l·∫≠p t·ª©c  | Khi c·∫ßn b·ªè qua m·ªôt s·ªë ƒëi·ªÅu ki·ªán nh∆∞ng v·∫´n ti·∫øp t·ª•c v√≤ng l·∫∑p
